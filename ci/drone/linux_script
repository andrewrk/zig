#!/bin/sh

set -x

uname -a
hostname
cat /proc/meminfo| grep -i ^mem
pwd
df -h $HOME/.
df -h .
ls -al $HOME/.
ls -al .
ulimit -a
env | sort
cat /etc/apk/repositories

set -e

export ZIG_GLOBAL_CACHE_DIR="$(pwd)/zig-cache"

TRIPLEARCH="$(uname -m)"
BUILDDIR="$(pwd)"
DISTDIR="$(pwd)/dist"

apk update
apk add py3-pip xz perl-utils jq curl samurai
pip3 install s3cmd

apk add util-linux
lscpu

# Make the `zig version` number consistent.
# This will affect the cmake command below.
git config core.abbrev 9
git fetch --unshallow || true
git fetch --tags

mkdir build
cd build
cmake .. -GNinja \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX="$DISTDIR" \
    -DZIG_STATIC=ON \
    -DCMAKE_PREFIX_PATH="/deps/local" \
    -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

samu install

## what does zig detect
./zig build-obj --show-builtin
./zig build-obj --show-builtin -mcpu=baseline

## what we know about drone hang
## - happens during test
## - doesn't seem to linked to a specific test
## - time between `build test` and first console output ~282s

## enable coredumps
ulimit -c unlimited
ulimit -a
sync

## test_runner has an OOT killer set send SEGV to self-pid at 600s
## test_runner will also create file `core.exename` with path to test

#./zig build test \
#    -Dskip-release \
#    -Dskip-non-native \
#    -Dskip-compile-errors \
#    -Dskip-run-translated-c \
#    -Dlog=true \
#    -Dcpu=baseline \
#    --verbose-cc --verbose-link

#BUILD_TEST_PID=$!
#(sleep 60; echo "--- KILL $BUILD_TEST_PID ---"; kill -SEGV $BUILD_TEST_PID) &

## these are baseline features shown
#   .ete,
#   .fp_armv8,
#   .fuse_aes,
#   .neon,
#   .perfmon,
#   .trbe,
#   .use_postra_scheduler,

./zig test ../test/stage1/behavior.zig -I ../test -lc -mcpu=baseline
./zig test ../test/stage1/behavior.zig -I ../test -lc

./zig test ../lib/std/std.zig -mcpu=baseline
./zig test ../lib/std/std.zig

echo "-----  ALL DONE -----"
echo "-----  ALL DONE -----"
echo "-----  ALL DONE -----"

## now if we had a test hang, there should be "core" in cwd
#gdb -batch -ex "thread 1" -ex "bt" `cat core.exename` core

exit 0

if [ -z "$DRONE_PULL_REQUEST" ]; then
  mv ../LICENSE "$DISTDIR/"
  mv ../zig-cache/langref.html "$DISTDIR/"
  mv "$DISTDIR/bin/zig" "$DISTDIR/"
  rmdir "$DISTDIR/bin"

  GITBRANCH="$DRONE_BRANCH"
  VERSION="$("$DISTDIR/zig" version)"
  DIRNAME="zig-linux-$TRIPLEARCH-$VERSION"
  TARBALL="$DIRNAME.tar.xz"
  mv "$DISTDIR" "$DIRNAME"
  tar cfJ "$TARBALL" "$DIRNAME"

  s3cmd put -P --add-header="cache-control: public, max-age=31536000, immutable" "$TARBALL" s3://ziglang.org/builds/

  SHASUM=$(shasum -a 256 $TARBALL | cut '-d ' -f1)
  BYTESIZE=$(wc -c < $TARBALL)

  JSONFILE="$TRIPLEARCH-linux-$GITBRANCH.json"
  touch $JSONFILE
  echo "{\"tarball\": \"$TARBALL\"," >>$JSONFILE
  echo "\"shasum\": \"$SHASUM\"," >>$JSONFILE
  echo "\"size\": \"$BYTESIZE\"}" >>$JSONFILE

  s3cmd put -P --add-header="Cache-Control: max-age=0, must-revalidate" "$JSONFILE" "s3://ziglang.org/builds/$JSONFILE"
  s3cmd put -P "$JSONFILE" "s3://ziglang.org/builds/$TRIPLEARCH-linux-$VERSION.json"
  if [ "$GITBRANCH" = "master" ]; then 
    # avoid leaking oauth token
    set +x

    cd "$BUILDDIR"
    ./ci/srht/on_master_success "$VERSION" "$SRHT_OAUTH_TOKEN"
  fi
fi
