extern "c" threadlocal var errno: c_int;
pub fn _errno() *c_int {
    return &errno;
}

pub extern "c" fn alarm(arg0: c_uint) c_uint;
pub extern "c" fn chown(arg0: [*c]const u8, arg1: uid_t, arg2: gid_t) c_int;
pub extern "c" fn eaccess(arg0: [*c]const u8, arg1: c_int) c_int;
pub extern "c" fn execl(arg0: [*c]const u8, arg1: [*c]const u8, ...) c_int;
pub extern "c" fn execle(arg0: [*c]const u8, arg1: [*c]const u8, ...) c_int;
pub extern "c" fn execlp(arg0: [*c]const u8, arg1: [*c]const u8, ...) c_int;
pub extern "c" fn execv(arg0: [*c]const u8, arg1: [*c]const ([*c]u8)) c_int;
pub extern "c" fn execvp(arg0: [*c]const u8, arg1: [*c]const ([*c]u8)) c_int;
pub extern "c" fn fpathconf(arg0: c_int, arg1: c_int) c_long;
pub extern "c" fn getegid() gid_t;
pub extern "c" fn geteuid() uid_t;
pub extern "c" fn getgid() gid_t;
pub extern "c" fn getgroups(arg0: c_int, arg1: [*c]gid_t) c_int;
pub extern "c" fn getlogin() [*c]u8;
pub extern "c" fn getpgrp() pid_t;
pub extern "c" fn getpid() pid_t;
pub extern "c" fn getppid() pid_t;
pub extern "c" fn getuid() uid_t;
pub extern "c" fn link(arg0: [*c]const u8, arg1: [*c]const u8) c_int;
pub extern "c" fn pathconf(arg0: [*c]const u8, arg1: c_int) c_long;
pub extern "c" fn pause() c_int;
pub extern "c" fn setpgid(arg0: pid_t, arg1: pid_t) c_int;
pub extern "c" fn setsid() pid_t;
pub extern "c" fn sleep(arg0: c_uint) c_uint;
pub extern "c" fn sysconf(arg0: c_int) c_long;
pub extern "c" fn tcgetpgrp(arg0: c_int) pid_t;
pub extern "c" fn tcsetpgrp(arg0: c_int, arg1: pid_t) c_int;
pub extern "c" fn ttyname(arg0: c_int) [*c]u8;
pub extern "c" fn ttyname_r(arg0: c_int, arg1: [*c]u8, arg2: usize) c_int;
pub extern "c" fn confstr(arg0: c_int, arg1: [*c]u8, arg2: usize) usize;
pub extern "c" fn getopt(arg0: c_int, arg1: [*c]const ([*c]u8), arg2: [*c]const u8) c_int;
pub extern "c" fn fsync(arg0: c_int) c_int;
pub extern "c" fn ftruncate(arg0: c_int, arg1: off_t) c_int;
pub extern "c" fn getlogin_r(arg0: [*c]u8, arg1: c_int) c_int;
pub extern "c" fn fchown(arg0: c_int, arg1: uid_t, arg2: gid_t) c_int;
pub extern "c" fn gethostname(arg0: [*c]u8, arg1: usize) c_int;
pub extern "c" fn setegid(arg0: gid_t) c_int;
pub extern "c" fn seteuid(arg0: uid_t) c_int;
pub extern "c" fn getsid(_pid: pid_t) c_int;
pub extern "c" fn fchdir(arg0: c_int) c_int;
pub extern "c" fn getpgid(_pid: pid_t) c_int;
pub extern "c" fn lchown(arg0: [*c]const u8, arg1: uid_t, arg2: gid_t) c_int;
pub extern "c" fn mkdtemp(arg0: [*c]u8) [*c]u8;
pub extern "c" fn mkstemp(arg0: [*c]u8) c_int;
pub extern "c" fn truncate(arg0: [*c]const u8, arg1: off_t) c_int;
pub extern "c" fn faccessat(arg0: c_int, arg1: [*c]const u8, arg2: c_int, arg3: c_int) c_int;
pub extern "c" fn fchownat(arg0: c_int, arg1: [*c]const u8, arg2: uid_t, arg3: gid_t, arg4: c_int) c_int;
pub extern "c" fn linkat(arg0: c_int, arg1: [*c]const u8, arg2: c_int, arg3: [*c]const u8, arg4: c_int) c_int;
pub extern "c" fn readlinkat(arg0: c_int, noalias arg1: [*c]const u8, noalias arg2: [*c]u8, arg3: usize) isize;
pub extern "c" fn symlinkat(arg0: [*c]const u8, arg1: c_int, arg2: [*c]const u8) c_int;
pub extern "c" fn unlinkat(arg0: c_int, arg1: [*c]const u8, arg2: c_int) c_int;
pub extern "c" fn crypt(arg0: [*c]const u8, arg1: [*c]const u8) [*c]u8;
pub extern "c" fn encrypt(arg0: [*c]u8, arg1: c_int) c_int;
pub extern "c" fn gethostid() c_long;
pub extern "c" fn lockf(arg0: c_int, arg1: c_int, arg2: off_t) c_int;
pub extern "c" fn nice(arg0: c_int) c_int;
pub extern "c" fn setpgrp(_pid: pid_t, _pgrp: pid_t) c_int;
pub extern "c" fn swab(noalias arg0: ?*const c_void, noalias arg1: ?*c_void, arg2: isize) void;
pub extern "c" fn sync() void;
pub extern "c" fn brk(arg0: ?*const c_void) c_int;
pub extern "c" fn chroot(arg0: [*c]const u8) c_int;
pub extern "c" fn chroot_kernel(arg0: [*c]const u8) c_int;
pub extern "c" fn getdtablesize() c_int;
pub extern "c" fn getpagesize() c_int;
pub extern "c" fn getpass(arg0: [*c]const u8) [*c]u8;
pub extern "c" fn sbrk(arg0: isize) ?*c_void;
pub extern "c" fn getwd(arg0: [*c]u8) [*c]u8;
pub extern "c" fn ualarm(arg0: c_uint, arg1: c_uint) c_uint;
pub extern "c" fn usleep(arg0: c_uint) c_int;
pub extern "c" fn vfork() c_int;
pub extern "c" fn acct(arg0: [*c]const u8) c_int;
pub extern "c" fn async_daemon() c_int;
pub extern "c" fn closefrom(arg0: c_int) c_int;
pub extern "c" fn crypt_get_format() [*c]const u8;
pub extern "c" fn crypt_set_format(arg0: [*c]const u8) c_int;
pub extern "c" fn endusershell() void;
pub extern "c" fn exect(arg0: [*c]const u8, arg1: [*c]const ([*c]u8), arg2: [*c]const ([*c]u8)) c_int;
pub extern "c" fn execvP(arg0: [*c]const u8, arg1: [*c]const u8, arg2: [*c]const ([*c]u8)) c_int;
pub extern "c" fn extexit(arg0: c_int, arg1: c_int, arg2: ?*c_void) void;
pub extern "c" fn extpread(arg0: c_int, arg1: ?*c_void, arg2: usize, arg3: c_int, arg4: off_t) isize;
pub extern "c" fn extpreadv(arg0: c_int, arg1: ?*const iovec, arg2: c_int, arg3: c_int, arg4: off_t) isize;
pub extern "c" fn extpwrite(arg0: c_int, arg1: ?*const c_void, arg2: usize, arg3: c_int, arg4: off_t) isize;
pub extern "c" fn extpwritev(arg0: c_int, arg1: ?*const iovec, arg2: c_int, arg3: c_int, arg4: off_t) isize;
pub extern "c" fn fflagstostr(arg0: u_long) [*c]u8;
pub extern "c" fn getdomainname(arg0: [*c]u8, arg1: c_int) c_int;
pub extern "c" fn getgrouplist(arg0: [*c]const u8, arg1: gid_t, arg2: [*c]gid_t, arg3: [*c]c_int) c_int;
pub extern "c" fn getmode(arg0: ?*const c_void, arg1: mode_t) mode_t;
pub extern "c" fn getosreldate() c_int;
pub extern "c" fn getpeereid(arg0: c_int, arg1: [*c]uid_t, arg2: [*c]gid_t) c_int;
pub extern "c" fn getresgid(arg0: [*c]gid_t, arg1: [*c]gid_t, arg2: [*c]gid_t) c_int;
pub extern "c" fn getresuid(arg0: [*c]uid_t, arg1: [*c]uid_t, arg2: [*c]uid_t) c_int;
pub extern "c" fn getusershell() [*c]u8;
pub extern "c" fn initgroups(arg0: [*c]const u8, arg1: gid_t) c_int;
pub extern "c" fn iruserok(arg0: c_ulong, arg1: c_int, arg2: [*c]const u8, arg3: [*c]const u8) c_int;
pub extern "c" fn iruserok_sa(arg0: ?*const c_void, arg1: c_int, arg2: c_int, arg3: [*c]const u8, arg4: [*c]const u8) c_int;
pub extern "c" fn issetugid() c_int;
pub extern "c" fn lpathconf(arg0: [*c]const u8, arg1: c_int) c_long;
pub extern "c" fn lwp_gettid() lwpid_t;
pub extern "c" fn lwp_setname(arg0: lwpid_t, arg1: [*c]const u8) c_int;
pub extern "c" fn mknod(arg0: [*c]const u8, arg1: mode_t, arg2: dev_t) c_int;
pub extern "c" fn mkstemps(arg0: [*c]u8, arg1: c_int) c_int;
pub extern "c" fn mktemp(arg0: [*c]u8) [*c]u8;
pub extern "c" fn nfssvc(arg0: c_int, arg1: ?*c_void) c_int;
pub extern "c" fn profil(arg0: [*c]u8, arg1: usize, arg2: vm_offset_t, arg3: c_int) c_int;
pub extern "c" fn rcmd(arg0: [*c]([*c]u8), arg1: c_int, arg2: [*c]const u8, arg3: [*c]const u8, arg4: [*c]const u8, arg5: [*c]c_int) c_int;
pub extern "c" fn rcmd_af(arg0: [*c]([*c]u8), arg1: c_int, arg2: [*c]const u8, arg3: [*c]const u8, arg4: [*c]const u8, arg5: [*c]c_int, arg6: c_int) c_int;
pub extern "c" fn rcmdsh(arg0: [*c]([*c]u8), arg1: c_int, arg2: [*c]const u8, arg3: [*c]const u8, arg4: [*c]const u8, arg5: [*c]const u8) c_int;
pub extern "c" fn re_comp(arg0: [*c]const u8) [*c]u8;
pub extern "c" fn re_exec(arg0: [*c]const u8) c_int;
pub extern "c" fn reboot(arg0: c_int) c_int;
pub extern "c" fn revoke(arg0: [*c]const u8) c_int;
pub extern "c" fn rfork(arg0: c_int) pid_t;
pub extern "c" fn rfork_thread(arg0: c_int, arg1: ?*c_void, arg2: ?extern fn(?*c_void) c_int, arg3: ?*c_void) pid_t;
pub extern "c" fn rresvport(arg0: [*c]c_int) c_int;
pub extern "c" fn rresvport_af(arg0: [*c]c_int, arg1: c_int) c_int;
pub extern "c" fn ruserok(arg0: [*c]const u8, arg1: c_int, arg2: [*c]const u8, arg3: [*c]const u8) c_int;
pub extern "c" fn setdomainname(arg0: [*c]const u8, arg1: c_int) c_int;
pub extern "c" fn setgroups(arg0: c_int, arg1: [*c]const gid_t) c_int;
pub extern "c" fn sethostid(arg0: c_long) void;
pub extern "c" fn sethostname(arg0: [*c]const u8, arg1: c_int) c_int;
pub extern "c" fn setlogin(arg0: [*c]const u8) c_int;
pub extern "c" fn setmode(arg0: [*c]const u8) ?*c_void;
pub extern "c" fn setproctitle(_fmt: [*c]const u8, ...) void;
pub extern "c" fn setresgid(arg0: gid_t, arg1: gid_t, arg2: gid_t) c_int;
pub extern "c" fn setresuid(arg0: uid_t, arg1: uid_t, arg2: uid_t) c_int;
pub extern "c" fn setrgid(arg0: gid_t) c_int;
pub extern "c" fn setruid(arg0: uid_t) c_int;
pub extern "c" fn setusershell() void;
pub extern "c" fn strtofflags(arg0: [*c]([*c]u8), arg1: [*c]u_long, arg2: [*c]u_long) c_int;
pub extern "c" fn swapoff(arg0: [*c]const u8) c_int;
pub extern "c" fn swapon(arg0: [*c]const u8) c_int;
pub extern "c" fn syscall(arg0: c_int, ...) c_int;
pub extern "c" fn ttyslot() c_int;
pub extern "c" fn umtx_sleep(arg0: [*c]const volatile c_int, arg1: c_int, arg2: c_int) c_int;
pub extern "c" fn umtx_wakeup(arg0: [*c]const volatile c_int, arg1: c_int) c_int;
pub extern "c" fn undelete(arg0: [*c]const u8) c_int;
pub extern "c" fn valloc(arg0: usize) ?*c_void;
pub extern "c" fn varsym_get(arg0: c_int, arg1: [*c]const u8, arg2: [*c]u8, arg3: c_int) c_int;
pub extern "c" fn varsym_list(arg0: c_int, arg1: [*c]u8, arg2: c_int, arg3: [*c]c_int) c_int;
pub extern "c" fn varsym_set(arg0: c_int, arg1: [*c]const u8, arg2: [*c]const u8) c_int;

pub extern "c" fn opendir(arg0: [*c]const u8) ?*DIR;
pub extern "c" fn readdir(arg0: ?*DIR) [*c]dirent;
pub extern "c" fn rewinddir(arg0: ?*DIR) void;
pub extern "c" fn closedir(arg0: ?*DIR) c_int;
pub extern "c" fn readdir_r(noalias arg0: ?*DIR, noalias arg1: [*c]dirent, noalias arg2: [*c]([*c]dirent)) c_int;
pub extern "c" fn alphasort(arg0: [*c]([*c]const dirent), arg1: [*c]([*c]const dirent)) c_int;
pub extern "c" fn dirfd(arg0: ?*DIR) c_int;
pub extern "c" fn fdopendir(arg0: c_int) ?*DIR;
pub extern "c" fn scandir(arg0: [*c]const u8, arg1: [*c]([*c]([*c]dirent)), arg2: ?extern fn([*c]const dirent) c_int, arg3: ?extern fn([*c]([*c]const dirent), [*c]([*c]const dirent)) c_int) c_int;
pub extern "c" fn seekdir(arg0: ?*DIR, arg1: c_long) void;
pub extern "c" fn telldir(arg0: ?*DIR) c_long;
pub extern "c" fn getdents(arg0: c_int, arg1: [*c]u8, arg2: c_int) c_int;

pub extern "c" fn getcontext(arg0: [*c]ucontext_t) c_int;
pub extern "c" fn setcontext(arg0: [*c]const ucontext_t) noreturn;
pub extern "c" fn makecontext(arg0: [*c]ucontext_t, arg1: ?extern fn() void, arg2: c_int, ...) void;
pub extern "c" fn swapcontext(arg0: [*c]ucontext_t, arg1: [*c]const ucontext_t) c_int;
pub extern "c" fn setcontext_quick(arg0: [*c]ucontext_t) void;
pub extern "c" fn makecontext_quick(arg0: [*c]ucontext_t) void;
pub extern "c" fn swapcontext_quick(arg0: [*c]ucontext_t, arg1: [*c]ucontext_t) void;
pub extern "c" fn signal(arg0: c_int, arg1: [*c]__sighandler_t) [*c]__sighandler_t;
pub extern "c" fn select(arg0: c_int, noalias arg1: [*c]fd_set, noalias arg2: [*c]fd_set, noalias arg3: [*c]fd_set, noalias arg4: [*c]timeval) c_int;
pub extern "c" fn pselect(arg0: c_int, noalias arg1: [*c]fd_set, noalias arg2: [*c]fd_set, noalias arg3: [*c]fd_set, noalias arg4: [*c]const timespec, noalias arg5: [*c]const sigset_t) c_int;

pub extern "c" fn asctime(arg0: [*c]const tm) [*c]u8;
pub extern "c" fn clock() clock_t;
pub extern "c" fn ctime(arg0: [*c]const time_t) [*c]u8;
pub extern "c" fn difftime(arg0: time_t, arg1: time_t) f64;
pub extern "c" fn gmtime(arg0: [*c]const time_t) [*c]tm;
pub extern "c" fn localtime(arg0: [*c]const time_t) [*c]tm;
pub extern "c" fn mktime(arg0: [*c]tm) time_t;
pub extern "c" fn strftime(noalias arg0: [*c]u8, arg1: usize, noalias arg2: [*c]const u8, noalias arg3: [*c]const tm) usize;
pub extern "c" fn time(arg0: [*c]time_t) time_t;
pub extern "c" fn tzset() void;
pub extern "c" fn clock_settime(arg0: clockid_t, arg1: [*c]const timespec) c_int;
pub extern "c" fn asctime_r(noalias arg0: [*c]const tm, noalias arg1: [*c]u8) [*c]u8;
pub extern "c" fn ctime_r(arg0: [*c]const time_t, arg1: [*c]u8) [*c]u8;
pub extern "c" fn gmtime_r(noalias arg0: [*c]const time_t, noalias arg1: [*c]tm) [*c]tm;
pub extern "c" fn localtime_r(noalias arg0: [*c]const time_t, noalias arg1: [*c]tm) [*c]tm;
pub extern "c" fn clock_getcpuclockid(arg0: pid_t, arg1: [*c]clockid_t) c_int;
pub extern "c" fn strptime(noalias arg0: [*c]const u8, noalias arg1: [*c]const u8, noalias arg2: [*c]tm) [*c]u8;
pub extern "c" fn getcpuclockid(arg0: pid_t, arg1: lwpid_t, arg2: [*c]clockid_t) c_int;
pub extern "c" fn tzsetwall() void;
pub extern "c" fn timelocal(arg0: [*c]tm) time_t;
pub extern "c" fn timegm(arg0: [*c]tm) time_t;
pub extern "c" fn strftime_l(noalias arg0: [*c]u8, arg1: usize, noalias arg2: [*c]const u8, noalias arg3: [*c]const tm, arg4: locale_t) usize;
pub extern "c" fn timespec_get(ts: [*c]timespec, base: c_int) c_int;
pub extern "c" fn adjtime(arg0: [*c]const timeval, arg1: [*c]timeval) c_int;
pub extern "c" fn futimes(arg0: c_int, arg1: [*c]const timeval) c_int;
pub extern "c" fn lutimes(arg0: [*c]const u8, arg1: [*c]const timeval) c_int;
pub extern "c" fn settimeofday(arg0: [*c]const timeval, arg1: [*c]const Timezone) c_int;
pub extern "c" fn getitimer(arg0: c_int, arg1: [*c]itimerval) c_int;
pub extern "c" fn setitimer(arg0: c_int, noalias arg1: [*c]const itimerval, noalias arg2: [*c]itimerval) c_int;
pub extern "c" fn utimes(arg0: [*c]const u8, arg1: [*c]const timeval) c_int;
pub extern "c" fn chmod(arg0: [*c]const u8, arg1: mode_t) c_int;
pub extern "c" fn fchmod(arg0: c_int, arg1: mode_t) c_int;
pub extern "c" fn fchmodat(arg0: c_int, arg1: [*c]const u8, arg2: mode_t, arg3: c_int) c_int;
pub extern "c" fn futimens(arg0: c_int, arg1: [*c]const timespec) c_int;
pub extern "c" fn utimensat(arg0: c_int, arg1: [*c]const u8, arg2: [*c]const timespec, arg3: c_int) c_int;
pub extern "c" fn lstat(noalias arg0: [*c]const u8, noalias arg1: [*c]Stat) c_int;
pub extern "c" fn mkfifo(arg0: [*c]const u8, arg1: mode_t) c_int;
pub extern "c" fn umask(arg0: mode_t) mode_t;
pub extern "c" fn fstatat(arg0: c_int, noalias arg1: [*c]const u8, noalias arg2: [*c]Stat, arg3: c_int) c_int;
pub extern "c" fn mkdirat(arg0: c_int, arg1: [*c]const u8, arg2: mode_t) c_int;
pub extern "c" fn mkfifoat(arg0: c_int, arg1: [*c]const u8, arg2: mode_t) c_int;
pub extern "c" fn mknodat(arg0: c_int, arg1: [*c]const u8, arg2: mode_t, arg3: dev_t) c_int;
pub extern "c" fn chflags(arg0: [*c]const u8, arg1: u_long) c_int;
pub extern "c" fn fchflags(arg0: c_int, arg1: u_long) c_int;
pub extern "c" fn lchflags(arg0: [*c]const u8, arg1: u_long) c_int;
pub extern "c" fn chflagsat(arg0: c_int, arg1: [*c]const u8, arg2: u_long, arg3: c_int) c_int;
pub extern "c" fn lchmod(arg0: [*c]const u8, arg1: mode_t) c_int;
pub extern "c" fn accept(arg0: c_int, noalias arg1: [*c]sockaddr, noalias arg2: [*c]socklen_t) c_int;
pub extern "c" fn extaccept(arg0: c_int, arg1: c_int, arg2: [*c]sockaddr, arg3: [*c]socklen_t) c_int;
pub extern "c" fn extconnect(arg0: c_int, arg1: c_int, arg2: [*c]sockaddr, arg3: socklen_t) c_int;
pub extern "c" fn getpeername(arg0: c_int, noalias arg1: [*c]sockaddr, noalias arg2: [*c]socklen_t) c_int;
pub extern "c" fn recv(arg0: c_int, arg1: ?*c_void, arg2: usize, arg3: c_int) isize;
pub extern "c" fn recvfrom(arg0: c_int, noalias arg1: ?*c_void, arg2: usize, arg3: c_int, noalias arg4: [*c]sockaddr, noalias arg5: [*c]socklen_t) isize;
pub extern "c" fn recvmsg(arg0: c_int, arg1: [*c]msghdr, arg2: c_int) isize;
pub extern "c" fn send(arg0: c_int, arg1: ?*const c_void, arg2: usize, arg3: c_int) isize;
pub extern "c" fn sendto(arg0: c_int, arg1: ?*const c_void, arg2: usize, arg3: c_int, arg4: [*c]const sockaddr, arg5: socklen_t) isize;
pub extern "c" fn sendmsg(arg0: c_int, arg1: [*c]const msghdr, arg2: c_int) isize;
pub extern "c" fn sendfile(arg0: c_int, arg1: c_int, arg2: off_t, arg3: usize, arg4: [*c]sf_hdtr, arg5: [*c]off_t, arg6: c_int) c_int;
pub extern "c" fn setsockopt(arg0: c_int, arg1: c_int, arg2: c_int, arg3: ?*const c_void, arg4: socklen_t) c_int;
pub extern "c" fn shutdown(arg0: c_int, arg1: c_int) c_int;
pub extern "c" fn sockatmark(arg0: c_int) c_int;
pub extern "c" fn socketpair(arg0: c_int, arg1: c_int, arg2: c_int, arg3: [*c]c_int) c_int;
pub extern "c" fn pfctlinput(arg0: c_int, arg1: [*c]sockaddr) void;

pub extern "c" fn inet6_option_alloc(arg0: ?*cmsghdr, arg1: c_int, arg2: c_int, arg3: c_int) [*c]u8;
pub extern "c" fn inet6_option_append(arg0: ?*cmsghdr, arg1: [*c]const u8, arg2: c_int, arg3: c_int) c_int;
pub extern "c" fn inet6_option_find(arg0: ?*const cmsghdr, arg1: [*c]([*c]u8), arg2: c_int) c_int;
pub extern "c" fn inet6_option_init(arg0: ?*c_void, arg1: [*c](?*cmsghdr), arg2: c_int) c_int;
pub extern "c" fn inet6_option_next(arg0: ?*const cmsghdr, arg1: [*c]([*c]u8)) c_int;
pub extern "c" fn inet6_option_space(arg0: c_int) c_int;
pub extern "c" fn inet6_opt_append(arg0: ?*c_void, arg1: socklen_t, arg2: c_int, arg3: u8, arg4: socklen_t, arg5: u8, arg6: [*c](?*c_void)) c_int;
pub extern "c" fn inet6_opt_find(arg0: ?*c_void, arg1: socklen_t, arg2: c_int, arg3: u8, arg4: [*c]socklen_t, arg5: [*c](?*c_void)) c_int;
pub extern "c" fn inet6_opt_finish(arg0: ?*c_void, arg1: socklen_t, arg2: c_int) c_int;
pub extern "c" fn inet6_opt_get_val(arg0: ?*c_void, arg1: c_int, arg2: ?*c_void, arg3: socklen_t) c_int;
pub extern "c" fn inet6_opt_init(arg0: ?*c_void, arg1: socklen_t) c_int;
pub extern "c" fn inet6_opt_next(arg0: ?*c_void, arg1: socklen_t, arg2: c_int, arg3: [*c]u8, arg4: [*c]socklen_t, arg5: [*c](?*c_void)) c_int;
pub extern "c" fn inet6_opt_set_val(arg0: ?*c_void, arg1: c_int, arg2: ?*c_void, arg3: socklen_t) c_int;
pub extern "c" fn inet6_rth_add(arg0: ?*c_void, arg1: [*c]const in6_addr) c_int;
pub extern "c" fn inet6_rth_getaddr(arg0: ?*const c_void, arg1: c_int) [*c]in6_addr;
pub extern "c" fn inet6_rth_init(arg0: ?*c_void, arg1: socklen_t, arg2: c_int, arg3: c_int) ?*c_void;
pub extern "c" fn inet6_rth_reverse(arg0: ?*const c_void, arg1: ?*c_void) c_int;
pub extern "c" fn inet6_rth_segments(arg0: ?*const c_void) c_int;
pub extern "c" fn inet6_rth_space(arg0: c_int, arg1: c_int) socklen_t;
pub extern "c" fn inet6_rthdr_add(arg0: ?*cmsghdr, arg1: [*c]const in6_addr, arg2: c_uint) c_int;
pub extern "c" fn inet6_rthdr_getaddr(arg0: ?*cmsghdr, arg1: c_int) [*c]in6_addr;
pub extern "c" fn inet6_rthdr_getflags(arg0: ?*const cmsghdr, arg1: c_int) c_int;
pub extern "c" fn inet6_rthdr_init(arg0: ?*c_void, arg1: c_int) ?*cmsghdr;
pub extern "c" fn inet6_rthdr_lasthop(arg0: ?*cmsghdr, arg1: c_uint) c_int;
pub extern "c" fn inet6_rthdr_segments(arg0: ?*const cmsghdr) c_int;
pub extern "c" fn inet6_rthdr_space(arg0: c_int, arg1: c_int) usize;

pub extern "c" fn readv(arg0: c_int, arg1: [*c]const iovec, arg2: c_int) isize;
pub extern "c" fn writev(arg0: c_int, arg1: [*c]const iovec, arg2: c_int) isize;

pub extern "c" fn mlockall(arg0: c_int) c_int;
pub extern "c" fn munlockall() c_int;
pub extern "c" fn shm_open(arg0: [*c]const u8, arg1: c_int, arg2: mode_t) c_int;
pub extern "c" fn shm_unlink(arg0: [*c]const u8) c_int;
pub extern "c" fn mlock(arg0: ?*const c_void, arg1: usize) c_int;
pub extern "c" fn msync(arg0: ?*c_void, arg1: usize, arg2: c_int) c_int;
pub extern "c" fn munlock(arg0: ?*const c_void, arg1: usize) c_int;
pub extern "c" fn posix_madvise(arg0: ?*c_void, arg1: usize, arg2: c_int) c_int;
pub extern "c" fn madvise(arg0: ?*c_void, arg1: usize, arg2: c_int) c_int;
pub extern "c" fn mcontrol(arg0: ?*c_void, arg1: usize, arg2: c_int, arg3: off_t) c_int;
pub extern "c" fn mincore(arg0: ?*const c_void, arg1: usize, arg2: [*c]u8) c_int;
pub extern "c" fn minherit(arg0: ?*c_void, arg1: usize, arg2: c_int) c_int;

pub extern "c" fn creat(arg0: [*c]const u8, arg1: mode_t) c_int;
pub extern "c" fn fcntl(arg0: c_int, arg1: c_int, ...) c_int;
pub extern "c" fn flock(arg0: c_int, arg1: c_int) c_int;

pub extern "c" fn sched_setparam(arg0: pid_t, arg1: [*c]const sched_param) c_int;
pub extern "c" fn sched_getparam(arg0: pid_t, arg1: [*c]sched_param) c_int;
pub extern "c" fn sched_setscheduler(arg0: pid_t, arg1: c_int, arg2: [*c]const sched_param) c_int;
pub extern "c" fn sched_getscheduler(arg0: pid_t) c_int;
pub extern "c" fn sched_yield() c_int;
pub extern "c" fn sched_get_priority_max(arg0: c_int) c_int;
pub extern "c" fn sched_get_priority_min(arg0: c_int) c_int;
pub extern "c" fn sched_rr_get_interval(arg0: pid_t, arg1: [*c]timespec) c_int;
pub extern "c" fn sched_setaffinity(arg0: pid_t, arg1: usize, arg2: [*c]const cpu_set_t) c_int;
pub extern "c" fn sched_getaffinity(arg0: pid_t, arg1: usize, arg2: [*c]cpu_set_t) c_int;
pub extern "c" fn sched_getcpu() c_int;

pub extern "c" fn pthread_atfork(arg0: ?extern fn() void, arg1: ?extern fn() void, arg2: ?extern fn() void) c_int;
pub extern "c" fn pthread_attr_getguardsize(noalias arg0: [*c]const pthread_attr_t, noalias arg1: [*c]usize) c_int;
pub extern "c" fn pthread_attr_getstack(noalias arg0: [*c]const pthread_attr_t, noalias arg1: [*c](?*c_void), noalias arg2: [*c]usize) c_int;
pub extern "c" fn pthread_attr_getstacksize(noalias arg0: [*c]const pthread_attr_t, noalias arg1: [*c]usize) c_int;
pub extern "c" fn pthread_attr_getstackaddr(arg0: [*c]const pthread_attr_t, arg1: [*c](?*c_void)) c_int;
pub extern "c" fn pthread_attr_getdetachstate(arg0: [*c]const pthread_attr_t, arg1: [*c]c_int) c_int;
pub extern "c" fn pthread_attr_setguardsize(arg0: [*c]pthread_attr_t, arg1: usize) c_int;
pub extern "c" fn pthread_attr_setstackaddr(arg0: [*c]pthread_attr_t, arg1: ?*c_void) c_int;
pub extern "c" fn pthread_attr_setstacksize(arg0: [*c]pthread_attr_t, arg1: usize) c_int;
pub extern "c" fn pthread_attr_setdetachstate(arg0: [*c]pthread_attr_t, arg1: c_int) c_int;
pub extern "c" fn pthread_barrier_destroy(arg0: [*c]pthread_barrier_t) c_int;
pub extern "c" fn pthread_barrier_init(noalias arg0: [*c]pthread_barrier_t, noalias arg1: [*c]const pthread_barrierattr_t, arg2: c_uint) c_int;
pub extern "c" fn pthread_barrier_wait(arg0: [*c]pthread_barrier_t) c_int;
pub extern "c" fn pthread_barrierattr_destroy(arg0: [*c]pthread_barrierattr_t) c_int;
pub extern "c" fn pthread_barrierattr_getpshared(noalias arg0: [*c]const pthread_barrierattr_t, noalias arg1: [*c]c_int) c_int;
pub extern "c" fn pthread_barrierattr_init(arg0: [*c]pthread_barrierattr_t) c_int;
pub extern "c" fn pthread_barrierattr_setpshared(arg0: [*c]pthread_barrierattr_t, arg1: c_int) c_int;
pub extern "c" fn pthread_cleanup_pop(arg0: c_int) void;
pub extern "c" fn pthread_cleanup_push(arg0: ?extern fn(?*c_void) void, arg1: ?*c_void) void;
pub extern "c" fn pthread_condattr_destroy(arg0: [*c]pthread_condattr_t) c_int;
pub extern "c" fn pthread_condattr_getclock(noalias arg0: [*c]const pthread_condattr_t, noalias arg1: [*c]clockid_t) c_int;
pub extern "c" fn pthread_condattr_getpshared(noalias arg0: [*c]const pthread_condattr_t, noalias arg1: [*c]c_int) c_int;
pub extern "c" fn pthread_condattr_init(arg0: [*c]pthread_condattr_t) c_int;
pub extern "c" fn pthread_condattr_setclock(arg0: [*c]pthread_condattr_t, arg1: clockid_t) c_int;
pub extern "c" fn pthread_condattr_setpshared(arg0: [*c]pthread_condattr_t, arg1: c_int) c_int;
pub extern "c" fn pthread_cond_broadcast(arg0: [*c]pthread_cond_t) c_int;
pub extern "c" fn pthread_cond_destroy(arg0: [*c]pthread_cond_t) c_int;
pub extern "c" fn pthread_cond_init(noalias arg0: [*c]pthread_cond_t, noalias arg1: [*c]const pthread_condattr_t) c_int;
pub extern "c" fn pthread_cond_signal(arg0: [*c]pthread_cond_t) c_int;
pub extern "c" fn pthread_cond_timedwait(noalias arg0: [*c]pthread_cond_t, noalias arg1: [*c]pthread_mutex_t, noalias arg2: [*c]const timespec) c_int;
pub extern "c" fn pthread_cond_wait(noalias arg0: [*c]pthread_cond_t, noalias arg1: [*c]pthread_mutex_t) c_int;
pub extern "c" fn pthread_detach(arg0: pthread_t) c_int;
pub extern "c" fn pthread_equal(arg0: pthread_t, arg1: pthread_t) c_int;
pub extern "c" fn pthread_exit(arg0: ?*c_void) noreturn;
pub extern "c" fn pthread_getspecific(arg0: pthread_key_t) ?*c_void;
pub extern "c" fn pthread_getcpuclockid(arg0: pthread_t, arg1: [*c]clockid_t) c_int;
pub extern "c" fn pthread_key_create(arg0: [*c]pthread_key_t, arg1: ?extern fn(?*c_void) void) c_int;
pub extern "c" fn pthread_key_delete(arg0: pthread_key_t) c_int;
pub extern "c" fn pthread_mutexattr_init(arg0: [*c]pthread_mutexattr_t) c_int;
pub extern "c" fn pthread_mutexattr_destroy(arg0: [*c]pthread_mutexattr_t) c_int;
pub extern "c" fn pthread_mutexattr_getpshared(noalias arg0: [*c]const pthread_mutexattr_t, noalias arg1: [*c]c_int) c_int;
pub extern "c" fn pthread_mutexattr_gettype(noalias arg0: [*c]const pthread_mutexattr_t, noalias arg1: [*c]c_int) c_int;
pub extern "c" fn pthread_mutexattr_setpshared(arg0: [*c]pthread_mutexattr_t, arg1: c_int) c_int;
pub extern "c" fn pthread_mutexattr_settype(arg0: [*c]pthread_mutexattr_t, arg1: c_int) c_int;
pub extern "c" fn pthread_mutex_destroy(arg0: [*c]pthread_mutex_t) c_int;
pub extern "c" fn pthread_mutex_init(noalias arg0: [*c]pthread_mutex_t, noalias arg1: [*c]const pthread_mutexattr_t) c_int;
pub extern "c" fn pthread_mutex_lock(arg0: [*c]pthread_mutex_t) c_int;
pub extern "c" fn pthread_mutex_timedlock(noalias arg0: [*c]pthread_mutex_t, noalias arg1: [*c]const timespec) c_int;
pub extern "c" fn pthread_mutex_trylock(arg0: [*c]pthread_mutex_t) c_int;
pub extern "c" fn pthread_mutex_unlock(arg0: [*c]pthread_mutex_t) c_int;
pub extern "c" fn pthread_rwlock_destroy(arg0: [*c]pthread_rwlock_t) c_int;
pub extern "c" fn pthread_rwlock_init(noalias arg0: [*c]pthread_rwlock_t, noalias arg1: [*c]const pthread_rwlockattr_t) c_int;
pub extern "c" fn pthread_rwlock_rdlock(arg0: [*c]pthread_rwlock_t) c_int;
pub extern "c" fn pthread_rwlock_timedrdlock(noalias arg0: [*c]pthread_rwlock_t, noalias arg1: [*c]const timespec) c_int;
pub extern "c" fn pthread_rwlock_timedwrlock(noalias arg0: [*c]pthread_rwlock_t, noalias arg1: [*c]const timespec) c_int;
pub extern "c" fn pthread_rwlock_tryrdlock(arg0: [*c]pthread_rwlock_t) c_int;
pub extern "c" fn pthread_rwlock_trywrlock(arg0: [*c]pthread_rwlock_t) c_int;
pub extern "c" fn pthread_rwlock_unlock(arg0: [*c]pthread_rwlock_t) c_int;
pub extern "c" fn pthread_rwlock_wrlock(arg0: [*c]pthread_rwlock_t) c_int;
pub extern "c" fn pthread_rwlockattr_destroy(arg0: [*c]pthread_rwlockattr_t) c_int;
pub extern "c" fn pthread_rwlockattr_getpshared(noalias arg0: [*c]const pthread_rwlockattr_t, noalias arg1: [*c]c_int) c_int;
pub extern "c" fn pthread_rwlockattr_init(arg0: [*c]pthread_rwlockattr_t) c_int;
pub extern "c" fn pthread_rwlockattr_setpshared(arg0: [*c]pthread_rwlockattr_t, arg1: c_int) c_int;
pub extern "c" fn pthread_setspecific(arg0: pthread_key_t, arg1: ?*const c_void) c_int;
pub extern "c" fn pthread_spin_destroy(arg0: [*c]pthread_spinlock_t) c_int;
pub extern "c" fn pthread_spin_init(arg0: [*c]pthread_spinlock_t, arg1: c_int) c_int;
pub extern "c" fn pthread_spin_lock(arg0: [*c]pthread_spinlock_t) c_int;
pub extern "c" fn pthread_spin_trylock(arg0: [*c]pthread_spinlock_t) c_int;
pub extern "c" fn pthread_spin_unlock(arg0: [*c]pthread_spinlock_t) c_int;
pub extern "c" fn pthread_cancel(arg0: pthread_t) c_int;
pub extern "c" fn pthread_setcancelstate(arg0: c_int, arg1: [*c]c_int) c_int;
pub extern "c" fn pthread_setcanceltype(arg0: c_int, arg1: [*c]c_int) c_int;
pub extern "c" fn pthread_testcancel() void;
pub extern "c" fn pthread_getprio(arg0: pthread_t) c_int;
pub extern "c" fn pthread_setprio(arg0: pthread_t, arg1: c_int) c_int;
pub extern "c" fn pthread_yield() void;
pub extern "c" fn pthread_mutexattr_getprioceiling(noalias arg0: [*c]const pthread_mutexattr_t, noalias arg1: [*c]c_int) c_int;
pub extern "c" fn pthread_mutexattr_setprioceiling(arg0: [*c]pthread_mutexattr_t, arg1: c_int) c_int;
pub extern "c" fn pthread_mutexattr_getprotocol(noalias arg0: [*c]const pthread_mutexattr_t, noalias arg1: [*c]c_int) c_int;
pub extern "c" fn pthread_mutexattr_setprotocol(arg0: [*c]pthread_mutexattr_t, arg1: c_int) c_int;
pub extern "c" fn pthread_mutex_getprioceiling(noalias arg0: [*c]const pthread_mutex_t, noalias arg1: [*c]c_int) c_int;
pub extern "c" fn pthread_mutex_setprioceiling(noalias arg0: [*c]pthread_mutex_t, arg1: c_int, noalias arg2: [*c]c_int) c_int;
pub extern "c" fn pthread_attr_getinheritsched(__restict: [*c]const pthread_attr_t, noalias arg1: [*c]c_int) c_int;
pub extern "c" fn pthread_attr_getschedparam(noalias arg0: [*c]const pthread_attr_t, noalias arg1: [*c]sched_param) c_int;
pub extern "c" fn pthread_attr_getschedpolicy(noalias arg0: [*c]const pthread_attr_t, noalias arg1: [*c]c_int) c_int;
pub extern "c" fn pthread_attr_getscope(noalias arg0: [*c]const pthread_attr_t, noalias arg1: [*c]c_int) c_int;
pub extern "c" fn pthread_attr_setinheritsched(arg0: [*c]pthread_attr_t, arg1: c_int) c_int;
pub extern "c" fn pthread_attr_setschedparam(noalias arg0: [*c]pthread_attr_t, noalias arg1: [*c]const sched_param) c_int;
pub extern "c" fn pthread_attr_setschedpolicy(arg0: [*c]pthread_attr_t, arg1: c_int) c_int;
pub extern "c" fn pthread_attr_setscope(arg0: [*c]pthread_attr_t, arg1: c_int) c_int;
pub extern "c" fn pthread_getschedparam(arg0: pthread_t, noalias arg1: [*c]c_int, noalias arg2: [*c]sched_param) c_int;
pub extern "c" fn pthread_setschedparam(arg0: pthread_t, arg1: c_int, arg2: [*c]const sched_param) c_int;
pub extern "c" fn pthread_getconcurrency() c_int;
pub extern "c" fn pthread_setconcurrency(arg0: c_int) c_int;
